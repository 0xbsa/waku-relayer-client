{"version":3,"file":"best-relayer.js","sourceRoot":"","sources":["../../src/search/best-relayer.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AAC/D,OAAO,EAAE,aAAa,EAAE,MAAM,8BAA8B,CAAC;AAC7D,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EACL,6BAA6B,EAC7B,cAAc,GACf,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEnD,MAAM,OAAO,aAAa;IACxB,MAAM,CAAC,eAAe,CACpB,KAAY,EACZ,YAAoB,EACpB,aAAsB;QAEtB,MAAM,qBAAqB,GAAG,YAAY,CAAC,WAAW,EAAE,CAAC;QACzD,MAAM,gBAAgB,GACpB,eAAe,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,QAAQ,CAAC,qBAAqB,CAAC;YAClE,EAAE,UAAU,CAAC;QACjB,IAAI,CAAC,gBAAgB,EAAE;YACrB,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC1D,MAAM,gBAAgB,GAAG,aAAa,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACnE,IAAI,mBAAmB,CAAC,MAAM,KAAK,gBAAgB,CAAC,MAAM,EAAE;YAC1D,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,MAAM,CACjD,OAAO,CAAC,EAAE,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,CAAC,CAC/C,CAAC;YACF,YAAY,CAAC,GAAG,CACd,sCACE,gBAAgB,CAAC,MACnB,KAAK,gBAAgB;iBAClB,GAAG,CAAC,OAAO,CAAC,EAAE,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;iBACvC,IAAI,CAAC,IAAI,CAAC,EAAE,CAChB,CAAC;SACH;QAED,IAAI,kBAAoC,CAAC;QACzC,IAAI,qBAAuC,CAAC;QAE5C,IAAI,MAAwB,CAAC;QAE7B,gBAAgB,CAAC,OAAO,CAAC,CAAC,cAAsB,EAAE,EAAE;YAClD,MAAM,WAAW,GAAa,MAAM,CAAC,IAAI,CACvC,gBAAgB,CAAC,cAAc,CAAC,CAAC,aAAa,CAC/C,CAAC;YACF,WAAW,CAAC,OAAO,CAAC,CAAC,UAAkB,EAAE,EAAE;gBACzC,MAAM,aAAa,GACjB,gBAAgB,CAAC,cAAc,CAAC,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;gBAC7D,IACE,6BAA6B,CAAC,aAAa,EAAE,KAAK,EAAE,aAAa,CAAC,EAClE;oBACA,OAAO;iBACR;gBACD,MAAM,GAAG,GAAG,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;gBAChD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,GAAG,GAAG,MAAM,EAAE;oBACtC,MAAM,GAAG,GAAG,CAAC;oBACb,kBAAkB,GAAG,cAAc,CAAC;oBACpC,qBAAqB,GAAG,UAAU,CAAC;iBACpC;YACH,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,EAAE;YACvE,OAAO,SAAS,CAAC;SAClB;QAED,MAAM,eAAe,GAAoB;YACvC,cAAc,EAAE,kBAAkB;YAClC,QAAQ,EACN,gBAAgB,CAAC,kBAAkB,CAAC,CAAC,aAAa,CAChD,qBAAqB,CACtB;YACH,YAAY;SACb,CAAC;QAEF,OAAO,eAAe,CAAC;IACzB,CAAC;CACF","sourcesContent":["import { Chain, SelectedRelayer } from '@railgun-community/shared-models';\nimport { RelayerFeeCache } from '../fees/relayer-fee-cache.js';\nimport { AddressFilter } from '../filters/address-filter.js';\nimport { RelayerDebug } from '../utils/relayer-debug.js';\nimport {\n  cachedFeeUnavailableOrExpired,\n  shortenAddress,\n} from '../utils/relayer-util.js';\nimport { isDefined } from '../utils/is-defined.js';\n\nexport class RelayerSearch {\n  static findBestRelayer(\n    chain: Chain,\n    tokenAddress: string,\n    useRelayAdapt: boolean,\n  ): Optional<SelectedRelayer> {\n    const tokenAddressLowercase = tokenAddress.toLowerCase();\n    const relayerTokenFees =\n      RelayerFeeCache.feesForChain(chain)?.forToken[tokenAddressLowercase]\n        ?.forRelayer;\n    if (!relayerTokenFees) {\n      return undefined;\n    }\n\n    const unfilteredAddresses = Object.keys(relayerTokenFees);\n    const relayerAddresses = AddressFilter.filter(unfilteredAddresses);\n    if (unfilteredAddresses.length !== relayerAddresses.length) {\n      const removedAddresses = unfilteredAddresses.filter(\n        address => !relayerAddresses.includes(address),\n      );\n      RelayerDebug.log(\n        `Filtered RAILGUN relayer addresses ${\n          removedAddresses.length\n        }: ${removedAddresses\n          .map(address => shortenAddress(address))\n          .join(', ')}`,\n      );\n    }\n\n    let bestRelayerAddress: Optional<string>;\n    let bestRelayerIdentifier: Optional<string>;\n\n    let minFee: Optional<bigint>;\n\n    relayerAddresses.forEach((relayerAddress: string) => {\n      const identifiers: string[] = Object.keys(\n        relayerTokenFees[relayerAddress].forIdentifier,\n      );\n      identifiers.forEach((identifier: string) => {\n        const nextCachedFee =\n          relayerTokenFees[relayerAddress].forIdentifier[identifier];\n        if (\n          cachedFeeUnavailableOrExpired(nextCachedFee, chain, useRelayAdapt)\n        ) {\n          return;\n        }\n        const fee = BigInt(nextCachedFee.feePerUnitGas);\n        if (!isDefined(minFee) || fee < minFee) {\n          minFee = fee;\n          bestRelayerAddress = relayerAddress;\n          bestRelayerIdentifier = identifier;\n        }\n      });\n    });\n\n    if (!isDefined(bestRelayerAddress) || !isDefined(bestRelayerIdentifier)) {\n      return undefined;\n    }\n\n    const selectedRelayer: SelectedRelayer = {\n      railgunAddress: bestRelayerAddress,\n      tokenFee:\n        relayerTokenFees[bestRelayerAddress].forIdentifier[\n          bestRelayerIdentifier\n        ],\n      tokenAddress,\n    };\n\n    return selectedRelayer;\n  }\n}\n"]}