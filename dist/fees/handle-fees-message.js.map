{"version":3,"file":"handle-fees-message.js","sourceRoot":"","sources":["../../src/fees/handle-fees-message.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,sDAGmC;AAMnC,oDAA4B;AAE5B,qDAAoD;AACpD,0DAAsD;AACtD,6DAAyD;AACzD,2DAAsD;AACtD,wDAA8D;AAC9D,oDAAmE;AACnE,oDAAgD;AAEhD,MAAM,kBAAkB,GAAG,CAAC,SAAyB,EAAE,EAAE;IACvD,IAAI,CAAC,SAAS,EAAE;QACd,OAAO,KAAK,CAAC;KACd;IACD,IAAI,SAAS,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;QAEpC,OAAO,KAAK,CAAC;KACd;IAGD,MAAM,cAAc,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;IAC9C,OAAO,SAAS,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC;AAC9C,CAAC,CAAC;AAEK,MAAM,wBAAwB,GAAG,CACtC,KAAY,EACZ,OAAiB,EACjB,YAAoB,EACpB,EAAE;IACF,IAAI;QACF,IAAI,CAAC,IAAA,sBAAS,EAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC/B,OAAO;SACR;QACD,IAAI,YAAY,KAAK,2BAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC9C,OAAO;SACR;QACD,IAAI,kBAAkB,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YACzC,OAAO;SACR;QAED,MAAM,OAAO,GAAG,IAAA,wBAAW,EAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC7C,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAG7C,CAAC;QACF,MAAM,UAAU,GAAG,IAAA,4BAAe,EAAC,IAAI,CAAC,CAAC;QACzC,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAA0B,CAAC;QAEvE,IAAI,CAAC,IAAA,sBAAS,EAAC,gBAAM,CAAC,MAAM,CAAC,IAAI,8BAAa,CAAC,MAAM,EAAE;YACrD,4BAAY,CAAC,GAAG,CACd,+GAA+G,CAChH,CAAC;YACF,oBAAoB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;YAC5C,OAAO;SACR;QAED,IAAI,IAAA,oCAAqB,EAAC,cAAc,CAAC,OAAO,CAAC,EAAE;YACjD,4BAAY,CAAC,GAAG,CACd,2CAA2C,cAAc,CAAC,OAAO,KAAK,cAAc,CAAC,cAAc,EAAE,CACtG,CAAC;YACF,OAAO;SACR;QAED,MAAM,EAAE,cAAc,EAAE,GAAG,cAAc,CAAC;QAC1C,MAAM,EAAE,gBAAgB,EAAE,GAAG,IAAA,oCAA2B,EAAC,cAAc,CAAC,CAAC;QACzE,MAAM,QAAQ,GAAG,MAAM,IAAA,+BAAsB,EAC3C,SAAS,EACT,IAAI,EACJ,gBAAgB,CACjB,CAAC;QACF,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO;SACR;QAED,oBAAoB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;KAC7C;IAAC,OAAO,GAAG,EAAE;QACZ,IAAI,CAAC,CAAC,GAAG,YAAY,KAAK,CAAC,EAAE;YAC3B,MAAM,GAAG,CAAC;SACX;QAED,4BAAY,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;QAChD,MAAM,aAAa,GAAG,IAAI,CAAC;QAC3B,4BAAY,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;KACxC;AACH,CAAC,CAAA,CAAC;AA5DW,QAAA,wBAAwB,4BA4DnC;AAEF,MAAM,oBAAoB,GAAG,CAC3B,KAAY,EACZ,cAAqC,EACrC,EAAE;IACF,MAAM,WAAW,GAA4B,EAAE,CAAC;IAChD,MAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACxD,cAAc,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;QACpC,MAAM,aAAa,GAAG,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACxD,IAAI,aAAa,EAAE;YACjB,MAAM,SAAS,GAAmB;gBAChC,aAAa;gBACb,UAAU,EAAE,cAAc,CAAC,aAAa;gBACxC,MAAM,EAAE,cAAc,CAAC,MAAM;gBAC7B,gBAAgB,EAAE,cAAc,CAAC,gBAAgB;gBACjD,UAAU,EAAE,cAAc,CAAC,UAAU;aACtC,CAAC;YACF,WAAW,CAAC,YAAY,CAAC,GAAG,SAAS,CAAC;SACvC;IACH,CAAC,CAAC,CAAC;IAEH,mCAAe,CAAC,YAAY,CAC1B,KAAK,EACL,cAAc,CAAC,cAAc,EAC7B,cAAc,CAAC,aAAa,EAC5B,WAAW,EACX,cAAc,CAAC,UAAU,EACzB,cAAc,CAAC,OAAO,CACvB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import {\n  verifyRelayerSignature,\n  getRailgunWalletAddressData,\n} from '@railgun-community/wallet';\nimport {\n  CachedTokenFee,\n  Chain,\n  RelayerFeeMessageData,\n} from '@railgun-community/shared-models';\nimport crypto from 'crypto';\nimport { IMessage } from '@waku/interfaces';\nimport { contentTopics } from '../waku/waku-topics';\nimport { RelayerDebug } from '../utils/relayer-debug';\nimport { RelayerConfig } from '../models/relayer-config';\nimport { RelayerFeeCache } from './relayer-fee-cache';\nimport { invalidRelayerVersion } from '../utils/relayer-util';\nimport { bytesToUtf8, hexToUTF8String } from '../utils/conversion';\nimport { isDefined } from '../utils/is-defined';\n\nconst isExpiredTimestamp = (timestamp: Optional<Date>) => {\n  if (!timestamp) {\n    return false;\n  }\n  if (timestamp.getFullYear() === 1970) {\n    // Waku timestamp bug.\n    return false;\n  }\n\n  // Expired if message originated > 45 seconds ago.\n  const expirationMsec = Date.now() - 45 * 1000;\n  return timestamp.getTime() < expirationMsec;\n};\n\nexport const handleRelayerFeesMessage = async (\n  chain: Chain,\n  message: IMessage,\n  contentTopic: string,\n) => {\n  try {\n    if (!isDefined(message.payload)) {\n      return;\n    }\n    if (contentTopic !== contentTopics.fees(chain)) {\n      return;\n    }\n    if (isExpiredTimestamp(message.timestamp)) {\n      return;\n    }\n\n    const payload = bytesToUtf8(message.payload);\n    const { data, signature } = JSON.parse(payload) as {\n      data: string;\n      signature: string;\n    };\n    const utf8String = hexToUTF8String(data);\n    const feeMessageData = JSON.parse(utf8String) as RelayerFeeMessageData;\n\n    if (!isDefined(crypto.subtle) && RelayerConfig.IS_DEV) {\n      RelayerDebug.log(\n        'Skipping Relayer fee validation in DEV. `crypto.subtle` does not exist (not secure: use https or localhost). ',\n      );\n      updateFeesForRelayer(chain, feeMessageData);\n      return;\n    }\n\n    if (invalidRelayerVersion(feeMessageData.version)) {\n      RelayerDebug.log(\n        `Skipping Relayer outside version range: ${feeMessageData.version}, ${feeMessageData.railgunAddress}`,\n      );\n      return;\n    }\n\n    const { railgunAddress } = feeMessageData;\n    const { viewingPublicKey } = getRailgunWalletAddressData(railgunAddress);\n    const verified = await verifyRelayerSignature(\n      signature,\n      data,\n      viewingPublicKey,\n    );\n    if (!verified) {\n      return;\n    }\n\n    updateFeesForRelayer(chain, feeMessageData);\n  } catch (err) {\n    if (!(err instanceof Error)) {\n      throw err;\n    }\n\n    RelayerDebug.log('Error handling Relayer fees');\n    const ignoreInTests = true;\n    RelayerDebug.error(err, ignoreInTests);\n  }\n};\n\nconst updateFeesForRelayer = (\n  chain: Chain,\n  feeMessageData: RelayerFeeMessageData,\n) => {\n  const tokenFeeMap: MapType<CachedTokenFee> = {};\n  const tokenAddresses = Object.keys(feeMessageData.fees);\n  tokenAddresses.forEach(tokenAddress => {\n    const feePerUnitGas = feeMessageData.fees[tokenAddress];\n    if (feePerUnitGas) {\n      const cachedFee: CachedTokenFee = {\n        feePerUnitGas,\n        expiration: feeMessageData.feeExpiration,\n        feesID: feeMessageData.feesID,\n        availableWallets: feeMessageData.availableWallets,\n        relayAdapt: feeMessageData.relayAdapt,\n      };\n      tokenFeeMap[tokenAddress] = cachedFee;\n    }\n  });\n\n  RelayerFeeCache.addTokenFees(\n    chain,\n    feeMessageData.railgunAddress,\n    feeMessageData.feeExpiration,\n    tokenFeeMap,\n    feeMessageData.identifier,\n    feeMessageData.version,\n  );\n};\n"]}