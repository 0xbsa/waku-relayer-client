{"version":3,"file":"waku-observers.js","sourceRoot":"","sources":["../../src/waku/waku-observers.ts"],"names":[],"mappings":"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","sourcesContent":["import { Chain, compareChains } from '@railgun-community/shared-models';\nimport { createDecoder } from '@waku/core';\nimport { contentTopics } from './waku-topics.js';\nimport { RelayNode, IMessage } from '@waku/interfaces';\nimport { handleRelayerFeesMessage } from '../fees/handle-fees-message.js';\nimport { RelayerTransactResponse } from '../transact/relayer-transact-response.js';\nimport { RelayerDebug } from '../utils/relayer-debug.js';\nimport { ContentTopic } from '@waku/relay';\nimport { isDefined } from '../utils/is-defined.js';\n\nexport class WakuObservers {\n  private static currentChain: Optional<Chain>;\n\n  static setObserversForChain = async (\n    waku: Optional<RelayNode>,\n    chain: Chain,\n  ) => {\n    if (!waku) {\n      return;\n    }\n    if (\n      WakuObservers.currentChain &&\n      compareChains(WakuObservers.currentChain, chain)\n    ) {\n      return;\n    }\n    RelayerDebug.log(`Add Waku observers for chain: ${chain.type}:${chain.id}`);\n    WakuObservers.currentChain = chain;\n    WakuObservers.removeAllObservers(waku);\n    await WakuObservers.addChainObservers(waku, chain);\n    RelayerDebug.log(\n      `Waku listening for events on chain: ${chain.type}:${chain.id}`,\n    );\n  };\n\n  static resetCurrentChain = () => {\n    this.currentChain = undefined;\n  };\n\n  private static removeAllObservers = (waku: RelayNode) => {\n    if (!isDefined(waku.relay)) {\n      return;\n    }\n    // @ts-ignore\n    waku.relay.observers = new Map();\n  };\n\n  private static addChainObservers = async (waku: RelayNode, chain: Chain) => {\n    if (!isDefined(waku.relay)) {\n      return;\n    }\n\n    const contentTopicFees = contentTopics.fees(chain);\n    await waku.relay.subscribe(\n      createDecoder(contentTopicFees),\n      (message: IMessage) =>\n        handleRelayerFeesMessage(chain, message, contentTopicFees),\n    );\n\n    await waku.relay.subscribe(\n      createDecoder(contentTopics.transactResponse(chain)),\n      RelayerTransactResponse.handleRelayerTransactionResponseMessage,\n    );\n\n    // Log current list of observers\n    const currentContentTopics = WakuObservers.getCurrentContentTopics(waku);\n    RelayerDebug.log('Waku content topics:');\n    for (const observer of currentContentTopics) {\n      RelayerDebug.log(observer);\n    }\n  };\n\n  static getCurrentContentTopics(waku?: RelayNode): string[] {\n    // @ts-expect-error - 'observers' is private.\n    const observers = waku?.relay?.observers as Map<ContentTopic, Set<unknown>>;\n\n    const contentTopics: string[] = [];\n    for (const observer of observers.keys()) {\n      contentTopics.push(observer);\n    }\n    return contentTopics;\n  }\n}\n"]}