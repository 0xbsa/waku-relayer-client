{"version":3,"file":"railgun-waku-relayer-client.js","sourceRoot":"","sources":["../src/railgun-waku-relayer-client.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Chain,\n  delay,\n  RelayerConnectionStatus,\n  SelectedRelayer,\n} from '@railgun-community/shared-models';\nimport { RelayerFeeCache } from './fees/relayer-fee-cache';\nimport { AddressFilter } from './filters/address-filter';\nimport {\n  RelayerConnectionStatusCallback,\n  RelayerDebugger,\n  RelayerOptions,\n} from './models/export-models';\nimport { RelayerSearch } from './search/best-relayer';\nimport { RelayerStatus } from './status/relayer-connection-status';\nimport { RelayerDebug } from './utils/relayer-debug';\nimport { WakuObservers } from './waku/waku-observers';\nimport { WakuRelayerWakuCore } from './waku/waku-relayer-waku-core';\n\nexport class RailgunWakuRelayerClient {\n  private static chain: Chain;\n  private static statusCallback: RelayerConnectionStatusCallback;\n  private static started = false;\n  private static isRestarting = false;\n\n  static pollDelay = 10000;\n\n  static async start(\n    chain: Chain,\n    relayerOptions: RelayerOptions,\n    statusCallback: RelayerConnectionStatusCallback,\n    relayerDebugger?: RelayerDebugger,\n  ) {\n    this.chain = chain;\n    this.statusCallback = statusCallback;\n\n    WakuRelayerWakuCore.setRelayerOptions(relayerOptions);\n\n    if (relayerDebugger) {\n      RelayerDebug.setDebugger(relayerDebugger);\n    }\n\n    try {\n      this.started = false;\n      await WakuRelayerWakuCore.initWaku(chain);\n      this.started = true;\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.pollStatus();\n    } catch (err) {\n      if (!(err instanceof Error)) {\n        throw err;\n      }\n      throw new Error(`Cannot connect to Relayer network: ${err.message}`);\n    }\n  }\n\n  static async stop() {\n    await WakuRelayerWakuCore.disconnect();\n    this.started = false;\n    this.updateStatus();\n  }\n\n  static isStarted() {\n    return this.started;\n  }\n\n  static async setChain(chain: Chain): Promise<void> {\n    if (!RailgunWakuRelayerClient.started) {\n      return;\n    }\n\n    RailgunWakuRelayerClient.chain = chain;\n    await WakuObservers.setObserversForChain(WakuRelayerWakuCore.waku, chain);\n    RailgunWakuRelayerClient.updateStatus();\n  }\n\n  static getContentTopics(): string[] {\n    return WakuObservers.getCurrentContentTopics(WakuRelayerWakuCore.waku);\n  }\n\n  static getMeshPeerCount(): number {\n    return WakuRelayerWakuCore.getMeshPeerCount();\n  }\n\n  static findBestRelayer(\n    chain: Chain,\n    tokenAddress: string,\n    useRelayAdapt: boolean,\n  ): Optional<SelectedRelayer> {\n    if (!RailgunWakuRelayerClient.started) {\n      return;\n    }\n\n    return RelayerSearch.findBestRelayer(chain, tokenAddress, useRelayAdapt);\n  }\n\n  static setAddressFilters(\n    allowlist: Optional<string[]>,\n    blocklist: Optional<string[]>,\n  ): void {\n    AddressFilter.setAllowlist(allowlist);\n    AddressFilter.setBlocklist(blocklist);\n  }\n\n  static async tryReconnect(): Promise<void> {\n    // Reset fees, which will reset status to \"Searching\".\n    RelayerFeeCache.resetCache(RailgunWakuRelayerClient.chain);\n    RailgunWakuRelayerClient.updateStatus();\n\n    await RailgunWakuRelayerClient.restart();\n  }\n\n  static supportsToken(\n    chain: Chain,\n    tokenAddress: string,\n    useRelayAdapt: boolean,\n  ) {\n    return RelayerFeeCache.supportsToken(chain, tokenAddress, useRelayAdapt);\n  }\n\n  private static async restart(): Promise<void> {\n    if (this.isRestarting) {\n      return;\n    }\n    this.isRestarting = true;\n    try {\n      await WakuRelayerWakuCore.reinitWaku(this.chain);\n      this.isRestarting = false;\n    } catch (err) {\n      this.isRestarting = false;\n      if (!(err instanceof Error)) {\n        return;\n      }\n      RelayerDebug.log('Error reinitializing Waku Relayer Client');\n      RelayerDebug.error(err);\n    }\n  }\n\n  /**\n   * Start keep-alive poller which checks Relayer status every few seconds.\n   */\n  private static async pollStatus(): Promise<void> {\n    this.updateStatus();\n\n    await delay(RailgunWakuRelayerClient.pollDelay);\n\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.pollStatus();\n  }\n\n  private static updateStatus() {\n    const status = RelayerStatus.getRelayerConnectionStatus(this.chain);\n\n    this.statusCallback(this.chain, status);\n\n    if (\n      status === RelayerConnectionStatus.Disconnected ||\n      status === RelayerConnectionStatus.Error\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.restart();\n    }\n  }\n}\n"]}