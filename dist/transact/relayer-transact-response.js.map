{"version":3,"file":"relayer-transact-response.js","sourceRoot":"","sources":["../../src/transact/relayer-transact-response.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,2BAA2B,CAAC;AAE7D,OAAO,EAAE,WAAW,EAAE,MAAM,wBAAwB,CAAC;AACrD,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAQnD,MAAM,OAAO,uBAAuB;IAclC,MAAM,CAAC,KAAK,CAAC,uCAAuC,CAAC,OAAiB;QACpE,IAAI,CAAC,uBAAuB,CAAC,SAAS,EAAE;YACtC,OAAO;SACR;QACD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC/B,OAAO;SACR;QACD,IAAI;YACF,MAAM,OAAO,GAAG,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAE7C,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAEnD,CAAC;YAEF,MAAM,SAAS,GAAG,gBAAgB,CAChC,aAAa,EACb,uBAAuB,CAAC,SAAS,CAClC,CAAC;YACF,IAAI,SAAS,IAAI,IAAI,EAAE;gBACrB,OAAO;aACR;YAED,YAAY,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;YAC9D,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YAE5C,uBAAuB,CAAC,yBAAyB;gBAC/C,SAAiC,CAAC;SACrC;QAAC,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,CAAC,GAAG,YAAY,KAAK,CAAC,EAAE;gBAC3B,MAAM,GAAG,CAAC;aACX;YACD,YAAY,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;YACjE,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACzB;IACH,CAAC;;AA5CM,oCAAY,GAAG,CAAC,GAAe,EAAE,EAAE;IACxC,uBAAuB,CAAC,SAAS,GAAG,GAAG,CAAC;IACxC,uBAAuB,CAAC,yBAAyB,GAAG,SAAS,CAAC;AAChE,CAAC,CAAC;AAEK,sCAAc,GAAG,GAAG,EAAE;IAC3B,uBAAuB,CAAC,SAAS,GAAG,SAAS,CAAC;IAC9C,uBAAuB,CAAC,yBAAyB,GAAG,SAAS,CAAC;AAChE,CAAC,CAAC","sourcesContent":["import { decryptAESGCM256 } from '@railgun-community/wallet';\nimport { IMessage } from '@waku/interfaces';\nimport { bytesToUtf8 } from '../utils/conversion.js';\nimport { RelayerDebug } from '../utils/relayer-debug.js';\nimport { isDefined } from '../utils/is-defined.js';\n\nexport type WakuTransactResponse = {\n  id: string;\n  txHash?: string;\n  error?: string;\n};\n\nexport class RelayerTransactResponse {\n  static storedTransactionResponse: Optional<WakuTransactResponse>;\n  static sharedKey: Optional<Uint8Array>;\n\n  static setSharedKey = (key: Uint8Array) => {\n    RelayerTransactResponse.sharedKey = key;\n    RelayerTransactResponse.storedTransactionResponse = undefined;\n  };\n\n  static clearSharedKey = () => {\n    RelayerTransactResponse.sharedKey = undefined;\n    RelayerTransactResponse.storedTransactionResponse = undefined;\n  };\n\n  static async handleRelayerTransactionResponseMessage(message: IMessage) {\n    if (!RelayerTransactResponse.sharedKey) {\n      return;\n    }\n    if (!isDefined(message.payload)) {\n      return;\n    }\n    try {\n      const payload = bytesToUtf8(message.payload);\n\n      const { result: encryptedData } = JSON.parse(payload) as {\n        result: [string, string];\n      };\n\n      const decrypted = decryptAESGCM256(\n        encryptedData,\n        RelayerTransactResponse.sharedKey,\n      );\n      if (decrypted == null) {\n        return;\n      }\n\n      RelayerDebug.log('Handle Relayer transact-response message:');\n      RelayerDebug.log(JSON.stringify(decrypted));\n\n      RelayerTransactResponse.storedTransactionResponse =\n        decrypted as WakuTransactResponse;\n    } catch (err) {\n      if (!(err instanceof Error)) {\n        throw err;\n      }\n      RelayerDebug.log(`Could not handle Relayer tx response message`);\n      RelayerDebug.error(err);\n    }\n  }\n}\n"]}