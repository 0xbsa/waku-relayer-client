{"version":3,"file":"relayer-transact-response.js","sourceRoot":"","sources":["../../src/transact/relayer-transact-response.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,sDAA6D;AAE7D,oDAAkD;AAClD,0DAAsD;AACtD,oDAAgD;AAQhD,MAAa,uBAAuB;IAclC,MAAM,CAAO,uCAAuC,CAAC,OAAiB;;YACpE,IAAI,CAAC,uBAAuB,CAAC,SAAS,EAAE;gBACtC,OAAO;aACR;YACD,IAAI,CAAC,IAAA,sBAAS,EAAC,OAAO,CAAC,OAAO,CAAC,EAAE;gBAC/B,OAAO;aACR;YACD,IAAI;gBACF,MAAM,OAAO,GAAG,IAAA,wBAAW,EAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBAE7C,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAEnD,CAAC;gBAEF,MAAM,SAAS,GAAG,IAAA,yBAAgB,EAChC,aAAa,EACb,uBAAuB,CAAC,SAAS,CAClC,CAAC;gBACF,IAAI,SAAS,IAAI,IAAI,EAAE;oBACrB,OAAO;iBACR;gBAED,4BAAY,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAC;gBAC9D,4BAAY,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;gBAE5C,uBAAuB,CAAC,yBAAyB;oBAC/C,SAAiC,CAAC;aACrC;YAAC,OAAO,GAAG,EAAE;gBACZ,IAAI,CAAC,CAAC,GAAG,YAAY,KAAK,CAAC,EAAE;oBAC3B,MAAM,GAAG,CAAC;iBACX;gBACD,4BAAY,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;gBACjE,4BAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACzB;QACH,CAAC;KAAA;;AAhDH,0DAiDC;AA7CQ,oCAAY,GAAG,CAAC,GAAe,EAAE,EAAE;IACxC,uBAAuB,CAAC,SAAS,GAAG,GAAG,CAAC;IACxC,uBAAuB,CAAC,yBAAyB,GAAG,SAAS,CAAC;AAChE,CAAC,CAAC;AAEK,sCAAc,GAAG,GAAG,EAAE;IAC3B,uBAAuB,CAAC,SAAS,GAAG,SAAS,CAAC;IAC9C,uBAAuB,CAAC,yBAAyB,GAAG,SAAS,CAAC;AAChE,CAAC,CAAC","sourcesContent":["import { decryptAESGCM256 } from '@railgun-community/wallet';\nimport { IMessage } from '@waku/interfaces';\nimport { bytesToUtf8 } from '../utils/conversion';\nimport { RelayerDebug } from '../utils/relayer-debug';\nimport { isDefined } from '../utils/is-defined';\n\nexport type WakuTransactResponse = {\n  id: string;\n  txHash?: string;\n  error?: string;\n};\n\nexport class RelayerTransactResponse {\n  static storedTransactionResponse: Optional<WakuTransactResponse>;\n  static sharedKey: Optional<Uint8Array>;\n\n  static setSharedKey = (key: Uint8Array) => {\n    RelayerTransactResponse.sharedKey = key;\n    RelayerTransactResponse.storedTransactionResponse = undefined;\n  };\n\n  static clearSharedKey = () => {\n    RelayerTransactResponse.sharedKey = undefined;\n    RelayerTransactResponse.storedTransactionResponse = undefined;\n  };\n\n  static async handleRelayerTransactionResponseMessage(message: IMessage) {\n    if (!RelayerTransactResponse.sharedKey) {\n      return;\n    }\n    if (!isDefined(message.payload)) {\n      return;\n    }\n    try {\n      const payload = bytesToUtf8(message.payload);\n\n      const { result: encryptedData } = JSON.parse(payload) as {\n        result: [string, string];\n      };\n\n      const decrypted = decryptAESGCM256(\n        encryptedData,\n        RelayerTransactResponse.sharedKey,\n      );\n      if (decrypted == null) {\n        return;\n      }\n\n      RelayerDebug.log('Handle Relayer transact-response message:');\n      RelayerDebug.log(JSON.stringify(decrypted));\n\n      RelayerTransactResponse.storedTransactionResponse =\n        decrypted as WakuTransactResponse;\n    } catch (err) {\n      if (!(err instanceof Error)) {\n        throw err;\n      }\n      RelayerDebug.log(`Could not handle Relayer tx response message`);\n      RelayerDebug.error(err);\n    }\n  }\n}\n"]}